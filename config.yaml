######################################################################
#                       PIPELINE DEFINITION
######################################################################
# what modules are we running
run:
    # - dataset
    # - run_pairs
    #  - dndz
     - compare
    #- compare_noz_fom    #NOT IMPLEMENTED YET [see Pauline's module on Github]

######################################################################
#                       verbose module
######################################################################
# verbose config:
# 0: print nothing
# 1: print only upon completing full item
# 2: print everything

verbose: 1


######################################################################
#                       data set module
######################################################################
# All inputs are read as dictionaries, so it is important to respect the
# identation. It produces the catalog "dataset_path_output", containing
# unknown and reference samples correctly binned for the paircounts.

dataset:

    #****************************************************************
    reference_data:
        path: input_files/specz_COSMOS.fits
        #table: catalog [for hdf5 files]
        file_format: fits
        columns:
            ra_column: RA                           # name of RA column
            dec_column: DEC                         # name of DEC column
            z_column: Z                             # name of Z column
            w_column: None                          # name of W column (not mandatory, could be set to None or erased)


    #****************************************************************
    reference_random:
        path: input_files/specz_COSMOS_random.fits
        file_format: fits
        columns:
            ra_column: RA                         # name of RA column
            dec_column: DEC                       # name of DEC column
            z_column: None                        # name of Z column (not mandatory for randoms, could be set to None or erased)
            w_column: None                        # name of W column (not mandatory for randoms, could be set to None or erased)

    #****************************************************************
    unknown_data:
        path: input_files/photoz_COSMOS_speczrestricted.fits
        file_format: fits
        columns:
            ra_column: RA                           # name of RA column
            dec_column: DEC                         # name of DEC colum
            z_photo_columns: ['Zphoto']             # name of photo Z columns. !! WARNING: the first column has to be the best redshift estimate available (for AC_U_P or AC_U_D_)
            w_column: None                          # name of W column (not mandatory for randoms, could be set to None or erased)


    #****************************************************************
    unknown_random:
        path: input_files/photoz_COSMOS_speczrestricted_random.fits
        file_format: fits
        columns:
            ra_column: RA                           # name of RA column
            dec_column: DEC                         # name of DEC colum
            z_column: None                          # name of photo Z column (not mandatory, could be set to None or erased)
            w_column: None                          # name of W column (not mandatory, could be set to None or erased)


    #****************************************************************
    # Binning in tomographic bins for the unknown
    unknown_bins:
          name_column: Zphoto           #Name of the column for  binning  the unknown in tomobins. It could be different than redshift (e.g. colors)

          #type: between               # if type: between, it creates the array with numpy.linspace. array has to be in the form [min,max,numbofbins].
          #array: [0.4,0.8,3]          # the array will be numpy.linspace(min,max,numbofbins+1,endpoint=True)
                                      # if type: equal, you have to provide the edges of your bins in array (e.g. :array: [0.1,0.2,0.3,0.6,1.0])
                                      #
          type: equal
          array: [0.2,0.43,0.63,0.9]


    reference_bins:                     #Name of the column for binning of the reference. It could be different than redshift
          name_column: Z
          type: between                 # the array will be numpy.linspace(min,max,numbofbins+1,endpoint=True)
          array: [0.2,1.0,8]           # the array will be numpy.linspace(min,max,numbofbins+1,endpoint=True)
                                        # if type: equal, you have to provide the edges of your bins in array (e.g. :array: [0.1,0.2,0.3,0.6,1.0])
          #type: equal
          #array: [0.1,0.2,0.3,0.5,1.0]

    #****************************************************************


    max_objects: 300000000                             # maximum number of
                                                      # objects in catalog
  #  label_every: 10000                                # when assigning bins,
                                                      # set the chunk size
  #  randoms_time: 2.                                  #if randoms are more numerous than randoms_time*len(data_catalog), it cuts them


    kind_regions: 'kmeans'                           # current kinds: 'kmeans' or 'healpix'
    number_of_regions: 20                            # if kind is kmeans, number_of_region is number of regions found by kmeans
                                                     # elif kind is healpix, number_of_region is the healpix nside
    load_regions: None                               # path to the jackknifes centers. Only for kmeans. it can be left to None


    dontsaveplot: True

######################################################################
#                       run pairs module
######################################################################
# commands for calculating paircounts
run_pairs:

    #This module computes the cross-correlation and the autocorrelation for a number of cases.

    corr_tobecomputed: ['CC_P_','AC_R_P_']

    #         possibilities (all of them are as a function of reference redshift, except for AC_U_):
    #                 -   cross correlations:
    #                       -  'CC_A_'    cross correlation in angular scales
    #                       -  'CC_P_'    cross correlation in physical scales
    #                       -  'CC_D_'    cross correlation in physical scales, but with inverse distance weighting
    #
    #
    #                 -   auto correlations:
    #                       -  'AC_U_A_'    auto correlation UNKNOWN SAMPLE in angular scales
    #                       -  'AC_U_P_'    auto correlation UNKNOWN SAMPLE in physical scales
    #                       -  'AC_U_D_'    auto correlation UNKNOWN SAMPLE  in physical scales but with inverse distance weighting
    #                       -  'AC_U_'      1-bin autocorrelation UNKNOWN
    #
    #                       -  'AC_R_A_'    auto correlation REFERENCE SAMPLE in angular scales
    #                       -  'AC_R_P_'    auto correlation REFERENCE SAMPLE in physical scales
    #                       -  'AC_R_D_'    auto correlation REFERENCE  SAMPLE  in physical scales but with inverse distance weighting
    #                       -  'AC_R_R_'    projected 3_D auto correlation REFERENCE  SAMPLE  in physical scales
    #
    #
    #         Schmidt method requires CC_D_ .        bias correction: AC_D_R_ (reference), AC_D_R_ (unknown, only if unknown redshifts are REALLY good)
    #         Menard angular scales method requires CC_A_ .         bias correction: AC_R_A_ (reference), AC_U_A_ (unknown, only if unknown redshifts are REALLY good)
    #         Menard physical scales method requires CC_P_ .         bias correction: AC_R_P_ (reference), AC_U_P_ (unknown, only if unknown redshifts are REALLY good)
    #         Newman method requires CC_P_ , AC_U_ ,AC_R_R_

    tomo_bins: ['1','2','3']     # also 'ALL'

    overwrite: False            # if True, overwrite any existing files

    Nbins: [8]    # number of bins for the AC and CC.

    min_theta: 0.001   #[degrees] min separation for the angular CC and AC
    max_theta: 0.02    #[degrees] max separation for the angular CC and AC

    min_rp: 30.      #[kpc] min separation for the  CC and AC in physical distances
    max_rp: 100.     #[kpc] max separation for the  CC and AC in physical distances

    max_rpar: 80.     # [Mpc] #extrema of the integration for the projected autocorrelation


    cosmology: Planck15           #Accepted cosmology: Planck15,Planck13,WMAP9,WMAP7,WMAP5, FlatLambdaCDM
               ##  [FlatLambdaCDM]                  # For other cosmology modify directly in the dataset module: FlatLambdaCDM(H0=70, Om0=0.3)


    pairs : ['DD','DR']
    w_estimator: 'Natural_noRu'               # estimator for the w(theta) - just for plotting purposes : 'LS','Natural','Hamilton','Natural_noRu','Natural_noRr'
    number_of_cores: 4            # number of cores used in computing the pairs.

    jackknife_ring: False         #   it speeds up the computation when it comes to high number of jackknives.

    dontsaveplot: True
######################################################################
#                       dndz module
######################################################################
dndz:

    #  covariances guidelines: *********************************************************************
    #
    #  correlated subsamples bias the covariance low.
    #  ignoring pairs between patches biases the covariance high.
    #
    #  jackknife, pairs=True : split half of the pairs among different regions when removing jk_th region
    #  jackknife, pairs=False : ignore  the pairs among different regions when removing jk_th region
    #  bootstrap, pairs=True :  half of the pairs among different regions are assigned to the bootstrapped jk_th region
    #  jackknife, pairs=False : ignore the pairs among different regions when bootstrapping the jk_th region



    resampling: jackknife                # bootstrap or jackknife
    resampling_pairs: True               # resampling over pairs rather than galaxies
    number_of_bootstrap: 200             # number of bootstrap. Ingored in jackknife.

    # **********************************************************************************************


    photo_z_column: 'Zphoto'
    tomo_bins: ['1','2','3']         # also 'ALL'
    z_min: ['None','None','None']    #0.6 #'None'                   # z_min (>=)
    z_max: ['None','None','None']    #0.8 #'None'                   # z_max (<=)



    #  Methods used to compute the dndz. ***************************************************************

    #    - 'Menard' :                  dndz from cross-correlation computed at fixed angular scales
    #    - 'Menard_physical_scales':   dndz from cross-correlation computed at fixed physical scales

    #    - 'Newman':   it uses the Newman method (fit the cross-correlation computed at fixed angular scales)
    #    - 'Schimdt' : it uses the Schmidt method (one bin estimation, counting pairs in anulus in physical scales)

    methods:  ['Menard_physical_scales']



    # ***  Methods options ****************************************************************************

    # options Menard only: ******************************
    bias_correction_reference_Menard:  'AC_R_P_'      # it can be: None, AC_R_P_  or AC_R_R_
    bias_correction_unknown_Menard: 'None' #'AC_U_P_'        # it can be: None, AC_U_P_  or AC_U_

                                                     # Note: with AC_U_, it will perform the iterative procedure a la Newman

    gamma: 1.                     # exponent of the weigthing (theta**(-gamma))
    weight_variance:  False       # minimum variance weighting [Menard method only]
    pairs_weighting:  False       # if set, it weights the pair counts (DD,DR,RD,RR) first. [Menard method only]


    # options Newman only: ************************************************
    bias_correction_Newman: 1     # 0 NO BIAS,
                                  # bias = 1: iterative procedure to estimate b_u;

    fit_free: True                       # Newman: let the exponent of the cross correlation free in the fitting (defaul: False)
    use_physical_scale_Newman: True     # fit the CC in physical scales rather than angular scales (defaul: False)



    # options Schmidt only:  ******************************
    bias_correction_reference_Schmidt: 'AC_R_D_'      # it can be: None, AC_R_D_ or AC_R_R_
    bias_correction_unknown_Schmidt: 'None' #'AC_U_D_'        # it can be: None, AC_U_D_ or AC_U_

                                                      # Note: with AC_U_, it will perform the iterative procedure a la Newman



    # options Newman & Schmidt ******************************
    show_fit: False                # if true, it saves the fit for CC and AC


    # bounds format: [[min_amplitude, min_index, min_constant],[min_amplitude, min_index, min_constant]]
    # if fit_free=False, it will ignore the bounds and guess on the index of CC.

    bounds_CC_fit:        [[-1,1,-0.01],[1.,3, 0.01]]
    initial_guess_CC_fit: [0.01,2,0.01]
    bounds_AC_U_fit:       [[0.01,1,-0.01],[1.,3,0.01]]
    initial_guess_AC_U_fit: [0.01,2,0.01]
    bounds_AC_R_fit:       [[0.01,-1,-0.01],[200.,3,0.01]]
    initial_guess_AC_R_fit:  [2,1.5,0.01]

    # *** General options ****************************************************************************

    w_estimator: 'Natural_noRu'             # which estimator to use for the w(theta)

    only_diagonal:  True          # when it comes to compute statistics, it considers only the diagonal.
    verbose:  False

    # ***  Optimization options ****************************************************************************

    optimization:  False              # if false, it doesn't perform the scales optimization
    Nbins:  [8]                           # angular bins (they should be the same of run_pairs module)
    interval_width: 3.                    # parameter for the optimization of scales
    step_width: 6.                        # parameter for the optimization of scales

    # ***  Regularizations options  **************************************************************************
    # this will apply only to the dndz with and without bias correction that have proven to have the best S/N

    regularization: False                         # if set, it will correct for negative point and fit the dndz
    set_negative_to_zero:  fixed                     # set negative values to zero; none, fixed, mcmc
    fit: gaussian_match_pdf                           # choose between None, gaussian_processes,gaussian_match_pdf
    prior_gaussian_process: None    #[1.53689698e+04  , 1.68542771e-01]

# *****************************************************************************************************************************

###############################################################################
#                               COMPARE MODULE
###############################################################################

# compare takes input n(z) and does simple redshift bias model fitting
compare:

    label_output: 'Menard_bias_corrected'

    tomo_bins: ['1','2','3']  #tomobins as assumed in the dataset file.

    photo_z_columns: ['Zphoto'] #,'Zphoto']  #   it will avergae the photo-z predictions over these columns
    true_column:     'Zphoto'           #   it will compute the residual shifts over this

    path_wz_samples: ['./output_dndz/TOMO_1/best_Nz/Nz_Menard_physical_scales___jackknife_pairs_20','./output_dndz/TOMO_2/best_Nz/Nz_Menard_physical_scales___jackknife_pairs_20','./output_dndz/TOMO_3/best_Nz/Nz_Menard_physical_scales___jackknife_pairs_20']

    path_datasets: ['./pairscount/','./pairscount/','./pairscount/']

    match: 'mean'  #mean or chi2
    # priors ******************************************************************************
    #
    # priors have to be in the form of priors: {'tomo1': priors_tomo1, 'tomo2': priors_tomo2 ... 'tomoN': priors_tomoN, 'gamma': gamma}.
    # gamma can be omitted. for each tomobin, you can set the priors on shift,amplitude, and spread. omitting one of them will cause the code
    # to ignore the parameter in the MCMC
    #
    #

    priors: {'photo_z1' : {
                          # 1ST TOMOGRAPHIC BIN ************
                          'tomo1' : {'deltaz': {'kind': 'truncnorm', 'weight': 1,'kwargs': {'a': -5.0, 'b': 5.0,'loc': 0.0, 'scale': 0.05}},
                                    'amplitude' : {'kind': 'truncnorm', 'weight': 1,'kwargs': {'a': -5.0, 'b': 5.0,'loc': 0, 'scale': 1.}}}, #,
                                    #'spread': {'kind': 'uniform', 'weight': 1,'kwargs': {'loc': 1., 'scale': 0.00000001}}}

                          # 2ND TOMOGRAPHIC BIN ************
                          'tomo2' : {'deltaz': {'kind': 'truncnorm', 'weight': 1,'kwargs': {'a': -5.0, 'b': 5.0,'loc': 0.0, 'scale': 0.05}},
                                    'amplitude'  : {'kind': 'truncnorm', 'weight': 1,'kwargs': {'a': -5.0, 'b': 5.0,'loc': 0, 'scale': 1.}}}, #,
                                    #'spread': {'kind': 'uniform', 'weight': 1,'kwargs': {'loc': 1., 'scale': 0.00000001}}}

                          # 3RD TOMOGRAPHIC BIN ************
                          'tomo3' : {'deltaz': {'kind': 'truncnorm', 'weight': 1,'kwargs': {'a': -5.0, 'b': 5.0,'loc': 0.0, 'scale': 0.05}},
                                    'amplitude' : {'kind': 'truncnorm', 'weight': 1,'kwargs': {'a': -5.0, 'b': 5.0,'loc': 0, 'scale': 1.}}}}}#

    # **************************************************************************************
    sigma: all            #this selects wz dndz only in the interval mean(wz) +- sigma *std. all option available
    zmin: 'None'
    zmax: 'None'
    add_noise: True         #it adds random noise to the true distribution (for sims only and photoz)

    shift_pz_1: [0.,0.,0.]          #this applies a shift to the true distribution beforehand
    model_kwargs: {'z0': 0.5}

    resampling: bootstrap
    # mcmc options **************************************

    cov_mode: '2off_diag'
    nwalkers: 30
    nburnin: 20
    nrun: 30
    live_dangerously: False,
